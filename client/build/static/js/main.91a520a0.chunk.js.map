{
  "version": 3,
  "sources": [
    "utils/auth.js",
    "utils/API.js",
    "utils/localStorage.js",
    "pages/SearchBooks.js",
    "pages/SavedBooks.js",
    "components/SignupForm.js",
    "components/LoginForm.js",
    "components/Navbar.js",
    "App.js",
    "index.js"
  ],
  "names": [
    "decode",
    "this",
    "getToken",
    "token",
    "isTokenExpired",
    "exp",
    "Date",
    "now",
    "err",
    "localStorage",
    "getItem",
    "idToken",
    "setItem",
    "window",
    "location",
    "assign",
    "removeItem",
    "getMe",
    "fetch",
    "headers",
    "authorization",
    "saveBook",
    "bookData",
    "method",
    "body",
    "JSON",
    "stringify",
    "deleteBook",
    "bookId",
    "removeBookId",
    "savedBookIds",
    "parse",
    "updatedSavedBookIds",
    "filter",
    "savedBookId",
    "i",
    "SearchBooks",
    "useState",
    "searchedBooks",
    "setSearchedBooks",
    "searchInput",
    "setSearchInput",
    "setSavedBookIds",
    "useEffect",
    "bookIdArr",
    "length",
    "handleFormSubmit",
    "event",
    "preventDefault",
    "response",
    "ok",
    "Error",
    "json",
    "items",
    "map",
    "book",
    "id",
    "authors",
    "volumeInfo",
    "title",
    "description",
    "image",
    "imageLinks",
    "thumbnail",
    "console",
    "error",
    "handleSaveBook",
    "bookToSave",
    "find",
    "Auth",
    "loggedIn",
    "Jumbotron",
    "fluid",
    "className",
    "Container",
    "Form",
    "onSubmit",
    "Row",
    "Col",
    "xs",
    "md",
    "Control",
    "name",
    "value",
    "onChange",
    "e",
    "target",
    "type",
    "size",
    "placeholder",
    "Button",
    "variant",
    "CardColumns",
    "Card",
    "key",
    "border",
    "Img",
    "src",
    "alt",
    "Body",
    "Title",
    "Text",
    "disabled",
    "some",
    "onClick",
    "SavedBooks",
    "userData",
    "setUserData",
    "userDataLength",
    "Object",
    "keys",
    "user",
    "getUserData",
    "handleDeleteBook",
    "updatedUser",
    "savedBooks",
    "SignupForm",
    "username",
    "email",
    "password",
    "userFormData",
    "setUserFormData",
    "validated",
    "showAlert",
    "setShowAlert",
    "handleInputChange",
    "currentTarget",
    "checkValidity",
    "stopPropagation",
    "log",
    "login",
    "noValidate",
    "Alert",
    "dismissible",
    "onClose",
    "show",
    "Group",
    "Label",
    "htmlFor",
    "required",
    "Feedback",
    "LoginForm",
    "AppNavbar",
    "showModal",
    "setShowModal",
    "Navbar",
    "bg",
    "expand",
    "Brand",
    "as",
    "Link",
    "to",
    "Toggle",
    "aria-controls",
    "Collapse",
    "Nav",
    "logout",
    "Modal",
    "onHide",
    "aria-labelledby",
    "Tab",
    "defaultActiveKey",
    "Header",
    "closeButton",
    "Item",
    "eventKey",
    "Content",
    "Pane",
    "handleModalClose",
    "App",
    "exact",
    "path",
    "component",
    "render",
    "ReactDOM",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.91a520a0.chunk.js",
  "sourcesContent": [
    "// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n",
    "// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n",
    "export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n",
    "import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { saveBook, searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await saveBook(bookToSave, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n",
    "import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\nimport { getMe, deleteBook } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n\n  // use this to determine if `useEffect()` hook needs to run again\n  const userDataLength = Object.keys(userData).length;\n\n  useEffect(() => {\n    const getUserData = async () => {\n      try {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n          return false;\n        }\n\n        const response = await getMe(token);\n\n        if (!response.ok) {\n          throw new Error('something went wrong!');\n        }\n\n        const user = await response.json();\n        setUserData(user);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    getUserData();\n  }, [userDataLength]);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const response = await deleteBook(bookId, token);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const updatedUser = await response.json();\n      setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (!userDataLength) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n",
    "import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await createUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n",
    "// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { loginUser } from '../utils/API';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n",
    "import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n",
    "import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={SearchBooks} />\n          <Route exact path='/saved' component={SavedBooks} />\n          <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n        </Switch>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"
  ],
  "sourceRoot": ""
}
